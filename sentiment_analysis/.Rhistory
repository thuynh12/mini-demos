# Load in 'rvest' package
library('rvest')
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
rank_data_html <- html_nodes(webpage,'.text-primary')
rank_data <- html_text(rank_data_html)
head(rank_data)
rank_data<-as.numeric(rank_data)
head(rank_data)
#Using CSS selectors to scrape the title section
title.data.html <- html_nodes(webpage, '.lister-item-header a')
#html to text
title.data <- html_text(title.data.html)
#look at data
head(title.data)
#Using CSS selectors to scrape the description section
description.data.html <- html_nodes(webpage,'.ratings-bar+ .text-muted')
#Converting the description data to text
description,data <- html_text(description.data.html)
#Converting the description data to text
description.data <- html_text(description.data.html)
#look at data
head(description_data)
#Data-Preprocessing: removing '\n'
description_data<-gsub("\n","",description_data)
#Using CSS selectors to scrap the Movie runtime section
runtime_data_html <- html_nodes(webpage,'.text-muted .runtime')
#Converting the movie runtime data to text
runtime_data <- html_text(runtime_data_html)
#Let's have a look at the movie runtime
head(runtime_data)
#Data-Preprocessing: removing mins and converting it to numerical
runtime_data<-gsub(" min","",runtime_data)
runtime_data<-as.numeric(runtime_data)
#Let's have another look at the runtime data
head(rank_data)
#Let's have another look at the runtime data
head(runtime_data)
genre.data.html <- html_nodes(webpage, '.genre')
genre.data <- html_text(genre.data.html)
#Let's have a look at the genre
head(genre.data)
#Data-Preprocessing: removing \n
genre.data <- gsub("\n", "", genre.data)
#Data-Preprocessing: removing excess spaces
genre.data <- gsub(" ", "", genre.data)
#taking only the first genre of each movie
genre.data <- gsub(",.*","",genre.data)
#Convering each genre from text to factor
genre.data<-as.factor(genre.data)
#Let's have another look at the genre data
head(genre.data)
#Using CSS selectors to scrap the IMDB rating section
rating_data_html <- html_nodes(webpage,'.ratings-imdb-rating strong')
#Converting the ratings data to text
rating_data <- html_text(rating_data_html)
#Let's have a look at the ratings
head(rating_data)
#Data-Preprocessing: converting ratings to numerical
rating_data <- as.numeric(rating_data)
#Let's have another look at the ratings data
head(rating_data)
#Using CSS selectors to scrap the directors section
directors_data_html <- html_nodes(webpage,'.text-muted+ p a:nth-child(1)')
install.packages('syuzhet')
# install.packages('syuzhet')
library(syuzhet)
# Create a vector of emotional sentences.
# Add some happy ones, angry ones - you name it!
student_sentences <- c('I really like the pie you gave me this morning.',
'Your shoes suck and are just plain ugly.',
'I\'d really truly love going out in this weather!',
'I really hate hospitals',
'UW is good'
)
# Analyze sentiment for student sentences
get_sentiment(student_sentences)
# Analyze sentiment for student sentences
get_sentiment(student_sentences, mehod = 'syuhet')
# Analyze sentiment for student sentences
get_sentiment(student_sentences)
# Analyze sentiment for student sentences
sentiment <- data.frame(get_sentiment(student_sentences, method = 'syuzhet'))
student.analysis <- cbind(sentence = student_sentences, sentiment)
View(student.analysis)
library(stringr)
library(dplyr)
library(tidytext)
# install.packages('dplyr')
# install.packages('stringr')
install.packages('tidytext')
library(tidytext)
library(tidyr)
library(ggplot2)
##### LEXICONS #####
# Use the get_sentiments() function to get your dictionary of positive
# and negative words. Use the lexicon which categorizes words into
# positive and negative.
bing_sentiments <- get_sentiments("nrc")
##### LEXICONS #####
# Use the get_sentiments() function to get your dictionary of positive
# and negative words. Use the lexicon which categorizes words into
# positive and negative.
bing_sentiments <- get_sentiments("nrc")
View(bing_sentiments)
##### LEXICONS #####
# Use the get_sentiments() function to get your dictionary of positive
# and negative words. Use the lexicon which categorizes words into
# positive and negative.
bing_sentiments <- get_sentiments("bing")
View(bing_sentiments)
##### DATA ANALYSIS + WRANGLING #####
# Read books data in
books <- read.csv(file = 'data/austen_books.csv', stringsAsFactors = FALSE)
setwd("C:/Users/Tracy/mini-demos/sentiment_analysis")
##### DATA ANALYSIS + WRANGLING #####
# Read books data in
books <- read.csv(file = 'data/austen_books.csv', stringsAsFactors = FALSE)
# Map each word in the 'books' dataset to its dictionary-prescribed sentiment.
jane_austen_sentiment <- books %>%
inner_join(bing_sentiments, by = "word")
View(jane_austen_sentiment)
# Instead of having each individual word, count the number of positive/negative
# words in each chapter.
jane_austen_sentiment <- jane_austen_sentiment %>%
count(book, chapter, sentiment)
View(jane_austen_sentiment)
# A chapter's overarching feeling will be calculated by the number of positive
# words minus the number of negative words. Create a new column called
# 'sentiment' with this value.
jane_austen_sentiment <- jane_austen_sentiment %>%
spread(sentiment, n, fill = 0)
# A chapter's overarching feeling will be calculated by the number of positive
# words minus the number of negative words. Create a new column called
# 'sentiment' with this value.
jane_austen_sentiment <- jane_austen_sentiment %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
##### DATA ANALYSIS + WRANGLING #####
# Read books data in
books <- read.csv(file = 'data/austen_books.csv', stringsAsFactors = FALSE)
# A chapter's overarching feeling will be calculated by the number of positive
# words minus the number of negative words. Create a new column called
# 'sentiment' with this value.
jane_austen_sentiment <- jane_austen_sentiment %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Instead of having each individual word, count the number of positive/negative
# words in each chapter.
jane_austen_sentiment <- jane_austen_sentiment %>%
count(book, chapter, sentiment)
##### DATA ANALYSIS + WRANGLING #####
# Read books data in
books <- read.csv(file = 'data/austen_books.csv', stringsAsFactors = FALSE)
# Map each word in the 'books' dataset to its dictionary-prescribed sentiment.
jane_austen_sentiment <- books %>%
inner_join(bing_sentiments, by = "word")
# Instead of having each individual word, count the number of positive/negative
# words in each chapter.
jane_austen_sentiment <- jane_austen_sentiment %>%
count(book, chapter, sentiment)
# A chapter's overarching feeling will be calculated by the number of positive
# words minus the number of negative words. Create a new column called
# 'sentiment' with this value.
jane_austen_sentiment <- jane_austen_sentiment %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
##### CREATE OUR VISUALIZATION #####
# Use ggplot to plot each chapter's sentiment by book.
ggplot(jane_austen_sentiment, aes(chapter, sentiment, fill = book)) +
geom_bar(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = 'free_x')
##### CREATE OUR VISUALIZATION #####
# Use ggplot to plot each chapter's sentiment by book.
ggplot(jane_austen_sentiment, aes(chapter, sentiment, fill = book)) +
geom_bar(show.legend = FALSE, stat = 'identity') +
facet_wrap(~book, ncol = 2, scales = 'free_x')
# First, install the keras R package from GitHub as follows:
devtools::install_github("rstudio/keras")
